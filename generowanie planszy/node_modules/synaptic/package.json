{
  "_args": [
    [
      {
        "raw": "synaptic",
        "scope": null,
        "escapedName": "synaptic",
        "name": "synaptic",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\GIT\\SZI2017\\Neural networks"
    ]
  ],
  "_from": "synaptic@latest",
  "_id": "synaptic@1.0.11",
  "_inCache": true,
  "_location": "/synaptic",
  "_nodeVersion": "6.3.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/synaptic-1.0.11.tgz_1495839272473_0.902209916850552"
  },
  "_npmUser": {
    "name": "cazala",
    "email": "juancazala@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "synaptic",
    "scope": null,
    "escapedName": "synaptic",
    "name": "synaptic",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/synaptic/-/synaptic-1.0.11.tgz",
  "_shasum": "5f7aa16cf763c8a5999989ba2357e43c0112ea03",
  "_shrinkwrap": null,
  "_spec": "synaptic",
  "_where": "D:\\GIT\\SZI2017\\Neural networks",
  "author": {
    "name": "Juan Cazala",
    "email": "juancazala@gmail.com",
    "url": "http://juancazala.com/"
  },
  "bugs": {
    "url": "https://github.com/cazala/synaptic/issues"
  },
  "dependencies": {},
  "description": "architecture-free neural network library",
  "devDependencies": {
    "chai": "^3.5.0",
    "chai-stats": "^0.3.0",
    "karma": "^1.1.2",
    "karma-chrome-launcher": "^1.0.1",
    "karma-firefox-launcher": "^1.0.0",
    "karma-mocha": "^1.1.1",
    "karma-phantomjs-launcher": "^1.0.1",
    "karma-safari-launcher": "^1.0.0",
    "karma-webpack": "^1.7.0",
    "mocha": "^2.2.4",
    "pre-push": "^0.1.1",
    "webpack": "^1.13.1"
  },
  "directories": {},
  "dist": {
    "shasum": "5f7aa16cf763c8a5999989ba2357e43c0112ea03",
    "tarball": "https://registry.npmjs.org/synaptic/-/synaptic-1.0.11.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "5c8a46b9f0193239e98a195fe4a398c80e8c11ed",
  "homepage": "http://caza.la/synaptic",
  "keywords": [
    "neural network",
    "machine learning",
    "long short term memory",
    "perceptron",
    "architecture free"
  ],
  "license": {
    "type": "MIT",
    "url": "https://github.com/cazala/synaptic/blob/master/LICENSE"
  },
  "main": "./src/synaptic",
  "maintainers": [
    {
      "name": "cazala",
      "email": "cazala@mail.sfsu.edu"
    }
  ],
  "name": "synaptic",
  "optionalDependencies": {},
  "prepush": [
    "test",
    "build"
  ],
  "readme": "Synaptic [![Build Status](https://travis-ci.org/cazala/synaptic.svg?branch=master)](https://travis-ci.org/cazala/synaptic) [![Join the chat at https://synapticjs.slack.com](https://synaptic-slack-ugiqacqvmd.now.sh/badge.svg)](https://synaptic-slack-ugiqacqvmd.now.sh/)\n========\n\n## Important: [Synaptic 2.x](https://github.com/cazala/synaptic/issues/140) is in stage of discussion now! Feel free to participate\n\nSynaptic is a javascript neural network library for **node.js** and the **browser**, its generalized algorithm is architecture-free, so you can build and train basically any type of first order or even [second order neural network](http://en.wikipedia.org/wiki/Recurrent_neural_network#Second_Order_Recurrent_Neural_Network) architectures.\n\nThis library includes a few built-in architectures like [multilayer perceptrons](http://en.wikipedia.org/wiki/Multilayer_perceptron), [multilayer long-short term memory](http://en.wikipedia.org/wiki/Long_short_term_memory) networks (LSTM), [liquid state machines](http://en.wikipedia.org/wiki/Liquid_state_machine) or [Hopfield](http://en.wikipedia.org/wiki/Hopfield_network) networks, and a trainer capable of training any given network, which includes built-in training tasks/tests like solving an XOR, completing a Distracted Sequence Recall task or an [Embedded Reber Grammar](http://www.willamette.edu/~gorr/classes/cs449/reber.html) test, so you can easily test and compare the performance of different architectures.\n\n\nThe algorithm implemented by this library has been taken from Derek D. Monner's paper:\n\n[A generalized LSTM-like training algorithm for second-order recurrent neural networks](http://www.overcomplete.net/papers/nn2012.pdf)\n\n\nThere are references to the equations in that paper commented through the source code.\n\n#### Introduction\n\nIf you have no prior knowledge about Neural Networks, you should start by [reading this guide](https://github.com/cazala/synaptic/wiki/Neural-Networks-101).\n\n\nIf you want a practical example on how to feed data to a neural network, then take a look at [this article](https://github.com/cazala/synaptic/wiki/Normalization-101).\n\nYou may also want to take a look at [this article](http://blog.webkid.io/neural-networks-in-javascript/).\n\n#### Demos\n\n- [Solve an XOR](http://caza.la/synaptic/#/xor)\n- [Discrete Sequence Recall Task](http://caza.la/synaptic/#/dsr)\n- [Learn Image Filters](http://caza.la/synaptic/#/image-filters)\n- [Paint an Image](http://caza.la/synaptic/#/paint-an-image)\n- [Self Organizing Map](http://caza.la/synaptic/#/self-organizing-map)\n- [Read from Wikipedia](http://caza.la/synaptic/#/wikipedia)\n\nThe source code of these demos can be found in [this branch](https://github.com/cazala/synaptic/tree/gh-pages/scripts).\n\n#### Getting started\n\n- [Neurons](https://github.com/cazala/synaptic/wiki/Neurons/)\n- [Layers](https://github.com/cazala/synaptic/wiki/Layers/)\n- [Networks](https://github.com/cazala/synaptic/wiki/Networks/)\n- [Trainer](https://github.com/cazala/synaptic/wiki/Trainer/)\n- [Architect](https://github.com/cazala/synaptic/wiki/Architect/)\n\nTo try out the examples, checkout the [gh-pages](https://github.com/cazala/synaptic/tree/gh-pages) branch.\n\n`git checkout gh-pages`\n\n\n## Overview\n\n### Installation\n\n##### In node\n\nYou can install synaptic with [npm](http://npmjs.org):\n\n```cmd\nnpm install synaptic --save\n```\n\n##### In the browser\n\nYou can install synaptic with [bower](http://bower.io):\n\n```cmd\nbower install synaptic\n```\n\nOr you can simply use the CDN link, kindly provided by [CDNjs](https://cdnjs.com/)\n\n```html\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/synaptic/1.0.11/synaptic.js\"></script>\n```\n\n### Usage\n\n```javascript\nvar synaptic = require('synaptic'); // this line is not needed in the browser\nvar Neuron = synaptic.Neuron,\n\tLayer = synaptic.Layer,\n\tNetwork = synaptic.Network,\n\tTrainer = synaptic.Trainer,\n\tArchitect = synaptic.Architect;\n```\n\nNow you can start to create networks, train them, or use built-in networks from the [Architect](http://github.com/cazala/synaptic#architect).\n\n### Examples\n\n##### Perceptron\n\nThis is how you can create a simple **perceptron**:\n\n![perceptron](http://www.codeproject.com/KB/dotnet/predictor/network.jpg).\n\n```javascript\nfunction Perceptron(input, hidden, output)\n{\n\t// create the layers\n\tvar inputLayer = new Layer(input);\n\tvar hiddenLayer = new Layer(hidden);\n\tvar outputLayer = new Layer(output);\n\n\t// connect the layers\n\tinputLayer.project(hiddenLayer);\n\thiddenLayer.project(outputLayer);\n\n\t// set the layers\n\tthis.set({\n\t\tinput: inputLayer,\n\t\thidden: [hiddenLayer],\n\t\toutput: outputLayer\n\t});\n}\n\n// extend the prototype chain\nPerceptron.prototype = new Network();\nPerceptron.prototype.constructor = Perceptron;\n```\n\nNow you can test your new network by creating a trainer and teaching the perceptron to learn an XOR\n\n```javascript\nvar myPerceptron = new Perceptron(2,3,1);\nvar myTrainer = new Trainer(myPerceptron);\n\nmyTrainer.XOR(); // { error: 0.004998819355993572, iterations: 21871, time: 356 }\n\nmyPerceptron.activate([0,0]); // 0.0268581547421616\nmyPerceptron.activate([1,0]); // 0.9829673642853368\nmyPerceptron.activate([0,1]); // 0.9831714267395621\nmyPerceptron.activate([1,1]); // 0.02128894618097928\n```\n\n##### Long Short-Term Memory\n\nThis is how you can create a simple **long short-term memory** network with input gate, forget gate, output gate, and peephole connections:\n\n![long short-term memory](http://people.idsia.ch/~juergen/lstmcell4.jpg)\n\n```javascript\nfunction LSTM(input, blocks, output)\n{\n\t// create the layers\n\tvar inputLayer = new Layer(input);\n\tvar inputGate = new Layer(blocks);\n\tvar forgetGate = new Layer(blocks);\n\tvar memoryCell = new Layer(blocks);\n\tvar outputGate = new Layer(blocks);\n\tvar outputLayer = new Layer(output);\n\n\t// connections from input layer\n\tvar input = inputLayer.project(memoryCell);\n\tinputLayer.project(inputGate);\n\tinputLayer.project(forgetGate);\n\tinputLayer.project(outputGate);\n\n\t// connections from memory cell\n\tvar output = memoryCell.project(outputLayer);\n\n\t// self-connection\n\tvar self = memoryCell.project(memoryCell);\n\n\t// peepholes\n\tmemoryCell.project(inputGate);\n\tmemoryCell.project(forgetGate);\n\tmemoryCell.project(outputGate);\n\n\t// gates\n\tinputGate.gate(input, Layer.gateType.INPUT);\n\tforgetGate.gate(self, Layer.gateType.ONE_TO_ONE);\n\toutputGate.gate(output, Layer.gateType.OUTPUT);\n\n\t// input to output direct connection\n\tinputLayer.project(outputLayer);\n\n\t// set the layers of the neural network\n\tthis.set({\n\t\tinput: inputLayer,\n\t\thidden: [inputGate, forgetGate, memoryCell, outputGate],\n\t\toutput: outputLayer\n\t});\n}\n\n// extend the prototype chain\nLSTM.prototype = new Network();\nLSTM.prototype.constructor = LSTM;\n```\n\nThese are examples for explanatory purposes, the [Architect](https://github.com/cazala/synaptic/wiki/Architect/) already includes Multilayer Perceptrons and\nMultilayer LSTM network architectures.\n\n## Contribute\n\n**Synaptic** is an Open Source project that started in Buenos Aires, Argentina. Anybody in the world is welcome to contribute to the development of the project.\n\nIf you want to contribute feel free to send PR's, just make sure to run **npm run test** and **npm run build** before submitting it. This way you'll run all the test specs and build the web distribution files.\n\n<3\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cazala/synaptic.git"
  },
  "scripts": {
    "build": "webpack --config webpack.config.js",
    "test": "npm run test:src",
    "test:dist": "npm run build && npm run test:mocha:dist && npm run test:karma:browsers",
    "test:karma:browsers": "karma start --single-run --browsers Chrome,Firefox,SafariPrivate",
    "test:karma:phantomjs": "karma start --single-run --browsers PhantomJS",
    "test:mocha:dist": "mocha test --require dist/synaptic.js ./test",
    "test:mocha:src": "mocha test --require src/synaptic.js ./test",
    "test:src": "mocha test --require src/synaptic.js ./test",
    "test:travis": "npm run test:mocha:src && npm run build && npm run test:mocha:dist"
  },
  "version": "1.0.11"
}
